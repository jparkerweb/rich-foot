/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// src/main.js
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/modals.js
var import_obsidian = require("obsidian");
var ReleaseNotesModal = class extends import_obsidian.Modal {
  constructor(app, plugin, version, releaseNotes2) {
    super(app);
    this.plugin = plugin;
    this.version = version;
    this.releaseNotes = releaseNotes2;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: `Welcome to \u{1F9B6} Rich Foot v${this.version}` });
    contentEl.createEl("p", {
      text: "After each update you'll be prompted with the release notes. You can disable this in the plugin settings.",
      cls: "release-notes-instructions"
    });
    const promotionalLinks = contentEl.createEl("div");
    promotionalLinks.style.display = "flex";
    promotionalLinks.style.flexDirection = "row";
    promotionalLinks.style.justifyContent = "space-around";
    const equilllabsLink = promotionalLinks.createEl("a", {
      href: "https://www.equilllabs.com",
      target: "_blank"
    });
    equilllabsLink.createEl("img", {
      attr: {
        height: "36",
        style: "border:0px;height:36px;",
        src: "https://raw.githubusercontent.com/jparkerweb/pixel-banner/refs/heads/main/img/equilllabs.png?raw=true",
        border: "0",
        alt: "eQuill-Labs"
      }
    });
    const discordLink = promotionalLinks.createEl("a", {
      href: "https://discord.gg/sp8AQQhMJ7",
      target: "_blank"
    });
    discordLink.createEl("img", {
      attr: {
        height: "36",
        style: "border:0px;height:36px;",
        src: "https://raw.githubusercontent.com/jparkerweb/pixel-banner/refs/heads/main/img/discord.png?raw=true",
        border: "0",
        alt: "Discord"
      }
    });
    const kofiLink = promotionalLinks.createEl("a", {
      href: "https://ko-fi.com/Z8Z212UMBI",
      target: "_blank"
    });
    kofiLink.createEl("img", {
      attr: {
        height: "36",
        style: "border:0px;height:36px;",
        src: "https://raw.githubusercontent.com/jparkerweb/pixel-banner/refs/heads/main/img/support.png?raw=true",
        border: "0",
        alt: "Buy Me a Coffee at ko-fi.com"
      }
    });
    const notesContainer = contentEl.createDiv("release-notes-container");
    await import_obsidian.MarkdownRenderer.renderMarkdown(
      this.releaseNotes,
      notesContainer,
      "",
      this.plugin,
      this
    );
    contentEl.createEl("div", { cls: "release-notes-spacer" }).style.height = "20px";
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Close").onClick(() => this.close()));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// virtual-module:virtual:release-notes
var releaseNotes = '<h2>\u{1F3C3}\u200D\u2642\uFE0F Faster, \u{1F6C0} Cleaner, \u{1F9E0} Smarter</h2>\n<h3>[2.0.0] - 2024-12-06</h3>\n<h4>\u2728 Added</h4>\n<ul>\n<li>Introduced <code>RichFootComponent</code> for improved modularity and maintainability</li>\n</ul>\n<h4>\u{1F41B} Fixed</h4>\n<ul>\n<li>Optimized memory usage and event handling to prevent leaks</li>\n<li>Improved compatibility with Obsidian v1.7.2+</li>\n</ul>\n<h4>\u{1F4E6} Updated</h4>\n<ul>\n<li>Refactored codebase for cleaner architecture and better separation of concerns</li>\n</ul>\n<p><a href="https://raw.githubusercontent.com/jparkerweb/ref/refs/heads/main/equill-labs/rich-foot/rich-foot-v2.0.0.jpg"><img src="https://raw.githubusercontent.com/jparkerweb/ref/refs/heads/main/equill-labs/rich-foot/rich-foot-v2.0.0.jpg" alt="screenshot"></a></p>\n';

// src/settings.js
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  borderWidth: 1,
  borderStyle: "dashed",
  borderOpacity: 1,
  borderRadius: 15,
  datesOpacity: 1,
  linksOpacity: 1,
  showReleaseNotes: true,
  excludedFolders: [],
  dateColor: "var(--text-accent)",
  borderColor: "var(--text-accent)",
  linkColor: "var(--link-color)",
  linkBackgroundColor: "var(--tag-background)",
  linkBorderColor: "rgba(255, 255, 255, 0.204)",
  customCreatedDateProp: "",
  customModifiedDateProp: "",
  dateDisplayFormat: "mmmm dd, yyyy",
  showBacklinks: true,
  showOutlinks: true,
  showDates: true,
  combineLinks: false,
  updateDelay: 3e3
};
function rgbToHex(color) {
  if (color.startsWith("hsl")) {
    const temp = document.createElement("div");
    temp.style.color = color;
    document.body.appendChild(temp);
    color = getComputedStyle(temp).color;
    document.body.removeChild(temp);
  }
  const rgb = color.match(/\d+/g);
  if (!rgb || rgb.length < 3) return "#000000";
  const [r, g, b] = rgb.slice(0, 3).map((x) => {
    const val = Math.min(255, Math.max(0, Math.round(parseFloat(x))));
    return val.toString(16).padStart(2, "0");
  });
  return `#${r}${g}${b}`;
}
function formatDate(date, format) {
  const d = new Date(date);
  const year = d.getFullYear();
  const month = d.getMonth();
  const day = d.getDate();
  const weekday = d.getDay();
  const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  const monthsShort = months.map((m) => m.slice(0, 3));
  const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  const weekdaysShort = weekdays.map((w) => w.slice(0, 3));
  const pad = (num) => num.toString().padStart(2, "0");
  const tokens = {
    "dddd": weekdays[weekday],
    "ddd": weekdaysShort[weekday],
    "dd": pad(day),
    "d": day.toString(),
    "mmmm": months[month],
    "mmm": monthsShort[month],
    "mm": pad(month + 1),
    "m": (month + 1).toString(),
    "yyyy": year.toString(),
    "yy": year.toString().slice(-2)
  };
  const sortedTokens = Object.keys(tokens).sort((a, b) => b.length - a.length);
  let result = format.toLowerCase();
  const replacements = /* @__PURE__ */ new Map();
  sortedTokens.forEach((token, index) => {
    const placeholder = `__${index}__`;
    replacements.set(placeholder, tokens[token]);
    result = result.replace(new RegExp(token, "gi"), placeholder);
  });
  replacements.forEach((value, placeholder) => {
    result = result.replace(new RegExp(placeholder, "g"), value);
  });
  return result;
}
var RichFootSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    var _a;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("rich-foot-settings");
    containerEl.createEl("h2", { text: "Rich Foot Settings" });
    containerEl.createEl("div", { cls: "rich-foot-info", text: "\u{1F9B6} Rich Foot adds a footer to your notes with useful information such as backlinks, creation date, and last modified date. Use the settings below to customize the appearance." });
    containerEl.createEl("h3", { text: "Excluded Folders" });
    containerEl.createEl("p", {
      text: "Notes in excluded folders (and their subfolders) will not display the Rich Foot footer. This is useful for system folders or areas where you don't want footer information to appear.",
      cls: "setting-item-description"
    });
    const excludedFoldersContainer = containerEl.createDiv("excluded-folders-container");
    if ((_a = this.plugin.settings) == null ? void 0 : _a.excludedFolders) {
      this.plugin.settings.excludedFolders.forEach((folder, index) => {
        const folderDiv = excludedFoldersContainer.createDiv("excluded-folder-item");
        folderDiv.createSpan({ text: folder });
        const deleteButton = folderDiv.createEl("button", {
          text: "Delete",
          cls: "excluded-folder-delete"
        });
        deleteButton.addEventListener("click", async () => {
          this.plugin.settings.excludedFolders.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
    }
    const newFolderSetting = new import_obsidian2.Setting(containerEl).setName("Add excluded folder").setDesc("Enter a folder path or browse to select").addText((text) => text.setPlaceholder("folder/subfolder")).addButton((button) => button.setButtonText("Browse").onClick(async () => {
      const folder = await this.browseForFolder();
      if (folder) {
        const textComponent = newFolderSetting.components[0];
        textComponent.setValue(folder);
      }
    })).addButton((button) => button.setButtonText("Add").onClick(async () => {
      const textComponent = newFolderSetting.components[0];
      const newFolder = textComponent.getValue().trim();
      if (newFolder && !this.plugin.settings.excludedFolders.includes(newFolder)) {
        this.plugin.settings.excludedFolders.push(newFolder);
        await this.plugin.saveSettings();
        textComponent.setValue("");
        this.display();
      }
    }));
    containerEl.createEl("h3", { text: "Visibility Settings" });
    new import_obsidian2.Setting(containerEl).setName("Show Backlinks").setDesc("Show backlinks in the footer").addToggle((toggle) => toggle.setValue(this.plugin.settings.showBacklinks).onChange(async (value) => {
      this.plugin.settings.showBacklinks = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    }));
    new import_obsidian2.Setting(containerEl).setName("Show Outlinks").setDesc("Show outgoing links in the footer").addToggle((toggle) => toggle.setValue(this.plugin.settings.showOutlinks).onChange(async (value) => {
      this.plugin.settings.showOutlinks = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    }));
    new import_obsidian2.Setting(containerEl).setName("Show Combine Links").setDesc("Show backlinks and outlinks in a single combined section (overrides show backlinks and show outlinks settings)").addToggle((toggle) => toggle.setValue(this.plugin.settings.combineLinks).onChange(async (value) => {
      this.plugin.settings.combineLinks = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    }));
    new import_obsidian2.Setting(containerEl).setName("Rich-foot update delay").setDesc("Delay in milliseconds before updating the rich-foot in edit mode (10-100000ms)").addText((text) => {
      text.setPlaceholder("3000").setValue(String(this.plugin.settings.updateDelay)).onChange(async (value) => {
        const numValue = Math.floor(Number(value));
        if (!isNaN(numValue) && numValue >= 10 && numValue <= 1e5) {
          this.plugin.settings.updateDelay = numValue;
          await this.plugin.saveSettings();
          this.plugin.updateRichFootCallback = (0, import_obsidian2.debounce)(
            () => this.plugin.updateRichFoot(),
            numValue
          );
        }
      });
      text.inputEl.addEventListener("blur", async () => {
        const value = text.getValue();
        const numValue = Math.floor(Number(value));
        if (isNaN(numValue) || numValue < 10 || numValue > 1e5) {
          const validValue = this.plugin.settings.updateDelay || DEFAULT_SETTINGS.updateDelay;
          text.setValue(String(validValue));
          this.plugin.settings.updateDelay = validValue;
          await this.plugin.saveSettings();
        }
      });
      return text;
    }).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.updateDelay = DEFAULT_SETTINGS.updateDelay;
      await this.plugin.saveSettings();
      const textComponent = button.buttonEl.parentElement.parentElement.querySelector('input[type="text"]');
      if (textComponent) {
        textComponent.value = String(DEFAULT_SETTINGS.updateDelay);
      }
      this.plugin.updateRichFootCallback = (0, import_obsidian2.debounce)(
        () => this.plugin.updateRichFoot(),
        DEFAULT_SETTINGS.updateDelay
      );
    }));
    containerEl.createEl("h3", { text: "Date Settings" });
    new import_obsidian2.Setting(containerEl).setName("Show Dates").setDesc("Show creation and modification dates in the footer").addToggle((toggle) => toggle.setValue(this.plugin.settings.showDates).onChange(async (value) => {
      this.plugin.settings.showDates = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    }));
    new import_obsidian2.Setting(containerEl).setName("Date Display Format").setDesc("Choose how dates should be displayed in the footer").addDropdown((dropdown) => {
      const today = /* @__PURE__ */ new Date();
      const formats = [
        "mm/dd/yyyy",
        "dd/mm/yyyy",
        "yyyy-mm-dd",
        "mmm dd, yyyy",
        "dd mmm yyyy",
        "mmmm dd, yyyy",
        "ddd, mmm dd, yyyy",
        "dddd, mmmm dd, yyyy",
        "mm/dd/yy",
        "dd/mm/yy",
        "yy-mm-dd",
        "m/d/yy"
      ];
      formats.forEach((format) => {
        const example = formatDate(today, format);
        dropdown.addOption(format, `${format} (${example})`);
      });
      dropdown.setValue(this.plugin.settings.dateDisplayFormat).onChange(async (value) => {
        this.plugin.settings.dateDisplayFormat = value;
        await this.plugin.saveSettings();
        await this.plugin.updateRichFoot();
      });
    });
    new import_obsidian2.Setting(containerEl).setName("Custom Created Date Property").setDesc("Specify a frontmatter property to use for creation date (leave empty to use file creation date)").addText((text) => {
      text.setValue(this.plugin.settings.customCreatedDateProp).onChange(async (value) => {
        this.plugin.settings.customCreatedDateProp = value;
        await this.plugin.saveSettings();
        await this.plugin.updateRichFoot();
      });
      this.createdDateInput = text;
      return text;
    }).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.customCreatedDateProp = "";
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      this.createdDateInput.setValue("");
    }));
    new import_obsidian2.Setting(containerEl).setName("Custom Modified Date Property").setDesc("Specify a frontmatter property to use for modification date (leave empty to use file modification date)").addText((text) => {
      text.setValue(this.plugin.settings.customModifiedDateProp).onChange(async (value) => {
        this.plugin.settings.customModifiedDateProp = value;
        await this.plugin.saveSettings();
        await this.plugin.updateRichFoot();
      });
      this.modifiedDateInput = text;
      return text;
    }).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.customModifiedDateProp = "";
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      this.modifiedDateInput.setValue("");
    }));
    containerEl.createEl("h3", { text: "Style Settings" });
    new import_obsidian2.Setting(containerEl).setName("Border Width").setDesc("Adjust the width of the footer border (1-10px)").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.borderWidth).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.borderWidth = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.borderWidth = DEFAULT_SETTINGS.borderWidth;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const slider = this.containerEl.querySelector('input[type="range"]');
      if (slider) slider.value = DEFAULT_SETTINGS.borderWidth;
    }));
    new import_obsidian2.Setting(containerEl).setName("Border Style").setDesc("Choose the style of the footer border").addDropdown((dropdown) => {
      this.borderStyleDropdown = dropdown;
      return dropdown.addOptions({
        "solid": "Solid",
        "dashed": "Dashed",
        "dotted": "Dotted",
        "double": "Double",
        "groove": "Groove",
        "ridge": "Ridge",
        "inset": "Inset",
        "outset": "Outset"
      }).setValue(this.plugin.settings.borderStyle).onChange(async (value) => {
        this.plugin.settings.borderStyle = value;
        await this.plugin.saveSettings();
        await this.plugin.updateRichFoot();
      });
    }).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.borderStyle = DEFAULT_SETTINGS.borderStyle;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      this.borderStyleDropdown.setValue(DEFAULT_SETTINGS.borderStyle);
    }));
    new import_obsidian2.Setting(containerEl).setName("Border Opacity").setDesc("Adjust the opacity of the footer border (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.borderOpacity).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.borderOpacity = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.borderOpacity = DEFAULT_SETTINGS.borderOpacity;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const slider = button.buttonEl.parentElement.parentElement.querySelector('input[type="range"]');
      if (slider) slider.value = DEFAULT_SETTINGS.borderOpacity;
    }));
    new import_obsidian2.Setting(containerEl).setName("Border Color").setDesc("Choose the color for the footer border").addColorPicker((color) => color.setValue(this.plugin.settings.borderColor.startsWith("var(--") ? (() => {
      const temp = document.createElement("div");
      temp.style.borderColor = "var(--text-accent)";
      document.body.appendChild(temp);
      const color2 = getComputedStyle(temp).borderColor;
      document.body.removeChild(temp);
      return rgbToHex(color2);
    })() : this.plugin.settings.borderColor).onChange(async (value) => {
      this.plugin.settings.borderColor = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.borderColor = DEFAULT_SETTINGS.borderColor;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const colorPicker = button.buttonEl.parentElement.parentElement.querySelector('input[type="color"]');
      if (colorPicker) {
        const temp = document.createElement("div");
        temp.style.borderColor = "var(--text-accent)";
        document.body.appendChild(temp);
        const color = getComputedStyle(temp).borderColor;
        document.body.removeChild(temp);
        colorPicker.value = rgbToHex(color);
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("Link Border Radius").setDesc("Adjust the border radius of Backlinks and Outlinks (0-15px)").addSlider((slider) => slider.setLimits(0, 15, 1).setValue(this.plugin.settings.borderRadius).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.borderRadius = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.borderRadius = DEFAULT_SETTINGS.borderRadius;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const slider = button.buttonEl.parentElement.parentElement.querySelector('input[type="range"]');
      if (slider) slider.value = DEFAULT_SETTINGS.borderRadius;
    }));
    new import_obsidian2.Setting(containerEl).setName("Links Opacity").setDesc("Adjust the opacity of Backlinks and Outlinks (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.linksOpacity).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.linksOpacity = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.linksOpacity = DEFAULT_SETTINGS.linksOpacity;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const slider = button.buttonEl.parentElement.parentElement.querySelector('input[type="range"]');
      if (slider) slider.value = DEFAULT_SETTINGS.linksOpacity;
    }));
    new import_obsidian2.Setting(containerEl).setName("Link Text Color").setDesc("Choose the color for link text").addColorPicker((color) => color.setValue(this.plugin.settings.linkColor.startsWith("var(--") ? (() => {
      const temp = document.createElement("div");
      temp.style.color = "var(--link-color)";
      document.body.appendChild(temp);
      const color2 = getComputedStyle(temp).color;
      document.body.removeChild(temp);
      return rgbToHex(color2);
    })() : this.plugin.settings.linkColor).onChange(async (value) => {
      this.plugin.settings.linkColor = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.linkColor = DEFAULT_SETTINGS.linkColor;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const colorPicker = button.buttonEl.parentElement.parentElement.querySelector('input[type="color"]');
      if (colorPicker) {
        const temp = document.createElement("div");
        temp.style.color = "var(--link-color)";
        document.body.appendChild(temp);
        const color = getComputedStyle(temp).color;
        document.body.removeChild(temp);
        colorPicker.value = rgbToHex(color);
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("Link Background Color").setDesc("Choose the background color for links").addColorPicker((color) => color.setValue(this.plugin.settings.linkBackgroundColor.startsWith("var(--") ? (() => {
      const temp = document.createElement("div");
      temp.style.backgroundColor = "var(--tag-background)";
      document.body.appendChild(temp);
      const color2 = getComputedStyle(temp).backgroundColor;
      document.body.removeChild(temp);
      return rgbToHex(color2);
    })() : this.plugin.settings.linkBackgroundColor).onChange(async (value) => {
      this.plugin.settings.linkBackgroundColor = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.linkBackgroundColor = DEFAULT_SETTINGS.linkBackgroundColor;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const colorPicker = button.buttonEl.parentElement.parentElement.querySelector('input[type="color"]');
      if (colorPicker) {
        const temp = document.createElement("div");
        temp.style.backgroundColor = "var(--tag-background)";
        document.body.appendChild(temp);
        const color = getComputedStyle(temp).backgroundColor;
        document.body.removeChild(temp);
        colorPicker.value = rgbToHex(color);
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("Link Border Color").setDesc("Choose the border color for links").addColorPicker((color) => color.setValue(this.plugin.settings.linkBorderColor.startsWith("rgba(") ? (() => {
      const temp = document.createElement("div");
      temp.style.borderColor = this.plugin.settings.linkBorderColor;
      document.body.appendChild(temp);
      const color2 = getComputedStyle(temp).borderColor;
      document.body.removeChild(temp);
      return rgbToHex(color2);
    })() : this.plugin.settings.linkBorderColor).onChange(async (value) => {
      this.plugin.settings.linkBorderColor = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.linkBorderColor = DEFAULT_SETTINGS.linkBorderColor;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const colorPicker = button.buttonEl.parentElement.parentElement.querySelector('input[type="color"]');
      if (colorPicker) {
        const temp = document.createElement("div");
        temp.style.borderColor = DEFAULT_SETTINGS.linkBorderColor;
        document.body.appendChild(temp);
        const color = getComputedStyle(temp).borderColor;
        document.body.removeChild(temp);
        colorPicker.value = rgbToHex(color);
      }
    }));
    new import_obsidian2.Setting(containerEl).setName("Dates Opacity").setDesc("Adjust the opacity of the Created / Modified Dates (0-1)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.datesOpacity).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.datesOpacity = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.datesOpacity = DEFAULT_SETTINGS.datesOpacity;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const slider = button.buttonEl.parentElement.parentElement.querySelector('input[type="range"]');
      if (slider) slider.value = DEFAULT_SETTINGS.datesOpacity;
    }));
    new import_obsidian2.Setting(containerEl).setName("Date Color").setDesc("Choose the color for Created / Modified Dates").addColorPicker((color) => color.setValue(this.plugin.settings.dateColor.startsWith("var(--") ? (() => {
      const temp = document.createElement("div");
      temp.style.color = "var(--text-accent)";
      document.body.appendChild(temp);
      const color2 = getComputedStyle(temp).color;
      document.body.removeChild(temp);
      return rgbToHex(color2);
    })() : this.plugin.settings.dateColor).onChange(async (value) => {
      this.plugin.settings.dateColor = value;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
    })).addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.dateColor = DEFAULT_SETTINGS.dateColor;
      await this.plugin.saveSettings();
      await this.plugin.updateRichFoot();
      const colorPicker = button.buttonEl.parentElement.parentElement.querySelector('input[type="color"]');
      if (colorPicker) {
        const temp = document.createElement("div");
        temp.style.color = "var(--text-accent)";
        document.body.appendChild(temp);
        const color = getComputedStyle(temp).color;
        document.body.removeChild(temp);
        colorPicker.value = rgbToHex(color);
      }
    }));
    containerEl.createEl("h3", { text: "Example Screenshot", cls: "rich-foot-example-title" });
    const exampleDiv = containerEl.createDiv({ cls: "rich-foot-example" });
    exampleDiv.createEl("img", {
      attr: {
        src: "https://raw.githubusercontent.com/jparkerweb/rich-foot/refs/heads/main/rich-foot.jpg",
        alt: "Rich Foot Example"
      }
    });
    new import_obsidian2.Setting(containerEl).setName("Show Release Notes").setDesc("Show release notes after plugin updates").addToggle((toggle) => toggle.setValue(this.plugin.settings.showReleaseNotes).onChange(async (value) => {
      this.plugin.settings.showReleaseNotes = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("View Release Notes").setDesc("View release notes for the current version").addButton((button) => button.setButtonText("View Release Notes").onClick(async () => {
      const notes = await this.plugin.getReleaseNotes(this.plugin.manifest.version);
      new ReleaseNotesModal(this.app, this.plugin, this.plugin.manifest.version, notes).open();
    }));
  }
  async browseForFolder() {
    const folders = this.app.vault.getAllLoadedFiles().filter((file) => file.children).map((folder) => folder.path);
    return new Promise((resolve) => {
      const modal = new FolderSuggestModal(this.app, folders, (result) => {
        resolve(result);
      });
      modal.open();
    });
  }
};
var FolderSuggestModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, folders, onChoose) {
    super(app);
    this.folders = folders;
    this.onChoose = onChoose;
  }
  getItems() {
    return this.folders;
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    this.onChoose(item);
  }
};

// src/components/rich-foot.js
var import_obsidian3 = require("obsidian");
var RichFootComponent = class extends import_obsidian3.Component {
  constructor(view, plugin) {
    super();
    this.view = view;
    this.plugin = plugin;
    this.container = null;
    this.debouncedEditRender = (0, import_obsidian3.debounce)(
      () => this.render(),
      this.plugin.settings.updateDelay,
      { maxWait: this.plugin.settings.updateDelay }
    );
    this.quickRender = (0, import_obsidian3.debounce)(
      () => this.render(),
      150
    );
  }
  async onload() {
    var _a;
    try {
      if (this.plugin.shouldExcludeFile(this.view.file.path)) {
        return;
      }
      const contentEl = this.view.contentEl;
      const isEditMode = this.view.getMode() === "source";
      let targetEl;
      if (isEditMode) {
        const cmSizer = contentEl.querySelector(".cm-sizer");
        if (cmSizer) {
          targetEl = cmSizer;
        } else {
          targetEl = contentEl;
        }
      } else {
        targetEl = contentEl.querySelector(".markdown-preview-sizer") || contentEl;
      }
      if (!targetEl) {
        console.error("Could not find target element for footer");
        return;
      }
      const existingFooter = targetEl.querySelector(".rich-foot");
      if (existingFooter) {
        existingFooter.remove();
      }
      this.container = document.createElement("div");
      this.container.addClass("rich-foot", "rich-foot--hidden");
      targetEl.appendChild(this.container);
      if (this.view.getMode() === "source") {
        const editorView = this.view.editor.cm;
        const listener = () => {
          this.debouncedEditRender.cancel();
          this.debouncedEditRender();
        };
        this.registerEvent(
          editorView.dom.addEventListener("keyup", listener)
        );
      }
      await this.quickRender();
    } catch (error) {
      console.error("Error loading RichFoot component:", error);
      (_a = this.container) == null ? void 0 : _a.remove();
    }
  }
  onunload() {
    var _a;
    (_a = this.container) == null ? void 0 : _a.remove();
    this.container = null;
  }
  async render() {
    var _a, _b, _c, _d;
    try {
      if (this.plugin.shouldExcludeFile(this.view.file.path)) {
        (_a = this.container) == null ? void 0 : _a.remove();
        return;
      }
      if (!this.container) {
        console.error("No container element found");
        return;
      }
      if (this.view.getMode() !== "source") {
        this.debouncedEditRender.cancel();
      }
      this.hide();
      this.container.empty();
      this.container.createDiv({ cls: "rich-foot--dashed-line" });
      const { backlinksData, outlinks } = await this.getLinksData();
      if (this.plugin.settings.combineLinks) {
        if ((backlinksData == null ? void 0 : backlinksData.data) && backlinksData.data.size > 0 || outlinks.size > 0) {
          const linksDiv = this.container.createDiv({ cls: "rich-foot--links" });
          const linksList = linksDiv.createEl("ul");
          if (backlinksData == null ? void 0 : backlinksData.data) {
            for (const [linkPath] of backlinksData.data) {
              if (!linkPath.endsWith(".md")) continue;
              const li = linksList.createEl("li");
              const link = li.createEl("a", {
                cls: "internal-link",
                href: linkPath,
                text: linkPath.split("/").pop().replace(".md", "")
              });
              link.dataset.href = linkPath;
              link.dataset.sourcePath = this.view.file.path;
              link.dataset.isBacklink = "true";
              if (outlinks.has(linkPath)) {
                link.dataset.isOutlink = "true";
              }
              this.setupLinkBehavior(link, linkPath);
            }
          }
          for (const linkPath of outlinks) {
            if (!((_b = backlinksData == null ? void 0 : backlinksData.data) == null ? void 0 : _b.has(linkPath))) {
              const li = linksList.createEl("li");
              const link = li.createEl("a", {
                cls: "internal-link",
                href: linkPath,
                text: linkPath.split("/").pop().replace(".md", "")
              });
              link.dataset.href = linkPath;
              link.dataset.sourcePath = this.view.file.path;
              link.dataset.isOutlink = "true";
              this.setupLinkBehavior(link, linkPath);
            }
          }
        }
      } else {
        if (this.plugin.settings.showBacklinks && (backlinksData == null ? void 0 : backlinksData.data) && backlinksData.data.size > 0) {
          const backlinksDiv = this.container.createDiv({ cls: "rich-foot--backlinks" });
          const backlinksUl = backlinksDiv.createEl("ul");
          for (const [linkPath] of backlinksData.data) {
            if (!linkPath.endsWith(".md")) continue;
            const li = backlinksUl.createEl("li");
            const link = li.createEl("a", {
              cls: "internal-link",
              href: linkPath,
              text: linkPath.split("/").pop().replace(".md", "")
            });
            link.dataset.href = linkPath;
            link.dataset.sourcePath = this.view.file.path;
            this.setupLinkBehavior(link, linkPath);
          }
        }
        if (this.plugin.settings.showOutlinks && outlinks && outlinks.size > 0) {
          const outlinksDiv = this.container.createDiv({ cls: "rich-foot--outlinks" });
          const outlinksUl = outlinksDiv.createEl("ul");
          for (const linkPath of outlinks) {
            const li = outlinksUl.createEl("li");
            const link = li.createEl("a", {
              cls: "internal-link",
              href: linkPath,
              text: linkPath.split("/").pop().replace(".md", "")
            });
            link.dataset.href = linkPath;
            link.dataset.sourcePath = this.view.file.path;
            this.setupLinkBehavior(link, linkPath);
          }
        }
      }
      if (this.plugin.settings.showDates) {
        const datesWrapper = this.container.createDiv({ cls: "rich-foot--dates-wrapper" });
        const modifiedDate = this.getFormattedDate(
          this.view.file.stat.mtime,
          this.plugin.settings.customModifiedDateProp
        );
        const createdDate = this.getFormattedDate(
          this.view.file.stat.ctime,
          this.plugin.settings.customCreatedDateProp
        );
        datesWrapper.createDiv({
          cls: "rich-foot--modified-date",
          text: modifiedDate
        });
        datesWrapper.createDiv({
          cls: "rich-foot--created-date",
          text: createdDate
        });
      }
      this.show();
      if (this.view.getMode() !== "source") {
        this.plugin.adjustFooterPadding();
      }
    } catch (error) {
      console.error("Error rendering RichFoot component:", error);
      (_c = this.container) == null ? void 0 : _c.empty();
      (_d = this.container) == null ? void 0 : _d.createEl("div", {
        cls: "rich-foot-error",
        text: "Error rendering footer"
      });
    }
  }
  async getLinksData() {
    const file = this.view.file;
    if (!file) {
      return;
    }
    const backlinksData = this.plugin.app.metadataCache.getBacklinksForFile(file);
    const outlinks = await this.plugin.getOutlinks(file);
    return { backlinksData, outlinks };
  }
  setupLinkBehavior(link, linkPath) {
    if (this.view.getMode() === "source") {
      let hoverTimeout = null;
      link.addEventListener("mouseover", (mouseEvent) => {
        if (hoverTimeout) clearTimeout(hoverTimeout);
        hoverTimeout = setTimeout(() => {
          this.plugin.app.workspace.trigger("hover-link", {
            event: mouseEvent,
            source: "rich-foot",
            hoverParent: link,
            targetEl: link,
            linktext: linkPath
          });
        }, 300);
      });
      link.addEventListener("mouseout", () => {
        if (hoverTimeout) {
          clearTimeout(hoverTimeout);
          hoverTimeout = null;
        }
      });
    }
    link.addEventListener("click", (event) => {
      event.preventDefault();
      this.plugin.app.workspace.openLinkText(linkPath, this.view.file.path);
    });
  }
  getFormattedDate(defaultDate, customProp) {
    if (customProp) {
      const cache = this.plugin.app.metadataCache.getFileCache(this.view.file);
      const frontmatter = cache == null ? void 0 : cache.frontmatter;
      if (frontmatter && frontmatter[customProp]) {
        const customDate = frontmatter[customProp];
        const d = new Date(customDate);
        if (!isNaN(d.getTime())) {
          return this.formatDate(d, this.plugin.settings.dateDisplayFormat);
        }
        return customDate;
      }
    }
    return this.formatDate(new Date(defaultDate), this.plugin.settings.dateDisplayFormat);
  }
  formatDate(date, format) {
    const d = date;
    const year = d.getFullYear();
    const month = d.getMonth();
    const day = d.getDate();
    const weekday = d.getDay();
    const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    const monthsShort = months.map((m) => m.slice(0, 3));
    const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    const weekdaysShort = weekdays.map((w) => w.slice(0, 3));
    const pad = (num) => num.toString().padStart(2, "0");
    const tokens = {
      "dddd": weekdays[weekday],
      "ddd": weekdaysShort[weekday],
      "dd": pad(day),
      "d": day.toString(),
      "mmmm": months[month],
      "mmm": monthsShort[month],
      "mm": pad(month + 1),
      "m": (month + 1).toString(),
      "yyyy": year.toString(),
      "yy": year.toString().slice(-2)
    };
    const sortedTokens = Object.keys(tokens).sort((a, b) => b.length - a.length);
    let result = format.toLowerCase();
    const replacements = /* @__PURE__ */ new Map();
    sortedTokens.forEach((token, index) => {
      const placeholder = `__${index}__`;
      replacements.set(placeholder, tokens[token]);
      result = result.replace(new RegExp(token, "gi"), placeholder);
    });
    replacements.forEach((value, placeholder) => {
      result = result.replace(new RegExp(placeholder, "g"), value);
    });
    return result;
  }
  show() {
    if (this.container) {
      requestAnimationFrame(() => {
        this.container.removeClass("rich-foot--hidden");
        this.container.style.removeProperty("display");
        this.container.style.opacity = "0";
        requestAnimationFrame(() => {
          this.container.style.opacity = "1";
        });
      });
    }
  }
  hide() {
    if (this.container) {
      this.container.addClass("rich-foot--hidden");
      this.container.style.display = "none";
    }
  }
};

// src/main.js
var RichFootPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "richFootComponents", /* @__PURE__ */ new Map());
    __publicField(this, "adjustFooterPadding", (0, import_obsidian4.debounce)(() => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      if (!activeView) return;
      const readingView = activeView.contentEl.querySelector(".markdown-reading-view");
      if (!readingView) return;
      const preview = readingView.querySelector(".markdown-preview-view");
      const previewSizer = readingView.querySelector(".markdown-preview-sizer");
      const footer = readingView.querySelector(".markdown-preview-sizer > .rich-foot");
      if (!preview || !previewSizer || !footer) return;
      readingView.style.setProperty("--rich-foot-top-padding", "0px");
      const contentHeight = previewSizer.offsetHeight - footer.offsetHeight;
      const availableSpace = preview.offsetHeight - contentHeight - footer.offsetHeight - 85;
      if (availableSpace > 20) {
        readingView.style.setProperty("--rich-foot-top-padding", `${availableSpace}px`);
        readingView.style.setProperty("--rich-foot-margin-bottom", "0");
      } else {
        readingView.style.setProperty("--rich-foot-top-padding", "10px");
        readingView.style.setProperty("--rich-foot-margin-bottom", "20px");
      }
    }, 100));
  }
  // Track components for each view
  async onload() {
    var _a;
    await this.loadSettings();
    this.quickUpdateCallback = (0, import_obsidian4.debounce)(async () => {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (!activeLeaf) return;
      const view = activeLeaf.view;
      if (!view || !(view instanceof import_obsidian4.MarkdownView)) return;
      await this.addRichFoot(view);
    }, 300);
    this.editUpdateCallback = (0, import_obsidian4.debounce)(async () => {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (!activeLeaf) return;
      const view = activeLeaf.view;
      if (!view || !(view instanceof import_obsidian4.MarkdownView)) return;
      await this.addRichFoot(view);
    }, ((_a = this.settings) == null ? void 0 : _a.updateDelay) || 1e3);
    this.registerEvents();
    this.addSettingTab(new RichFootSettingTab(this.app, this));
    await this.checkVersion();
    await this.quickUpdateCallback();
  }
  async addRichFoot(view) {
    if (!view || !(view instanceof import_obsidian4.MarkdownView)) {
      return;
    }
    if (this.shouldExcludeFile(view.file.path)) {
      this.removeExistingRichFoot(view);
      return;
    }
    const contentEl = view.contentEl;
    const cmEditor = view.editor;
    const isEditMode = view.getMode() === "source";
    const component = new RichFootComponent(view, this);
    this.richFootComponents.set(view, component);
    await component.onload();
  }
  isEditMode(view) {
    if (!view || !(view instanceof import_obsidian4.MarkdownView)) return false;
    return view.getMode() === "source";
  }
  removeExistingRichFoot(view) {
    const existingComponent = this.richFootComponents.get(view);
    if (existingComponent) {
      existingComponent.unload();
      this.richFootComponents.delete(view);
    }
  }
  onunload() {
    for (const component of this.richFootComponents.values()) {
      component.unload();
    }
    this.richFootComponents.clear();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    document.documentElement.style.setProperty("--rich-foot-date-color", this.settings.dateColor);
    if (!Array.isArray(this.settings.excludedFolders)) {
      this.settings.excludedFolders = [];
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async checkVersion() {
    const currentVersion = this.manifest.version;
    const lastVersion = this.settings.lastVersion;
    const shouldShow = this.settings.showReleaseNotes && (!lastVersion || lastVersion !== currentVersion);
    if (shouldShow) {
      const releaseNotes2 = await this.getReleaseNotes(currentVersion);
      new ReleaseNotesModal(this.app, this, currentVersion, releaseNotes2).open();
      this.settings.lastVersion = currentVersion;
      await this.saveSettings();
    }
  }
  async getReleaseNotes(version) {
    return releaseNotes;
  }
  async updateRichFoot() {
    document.documentElement.style.setProperty("--rich-foot-border-width", `${this.settings.borderWidth}px`);
    document.documentElement.style.setProperty("--rich-foot-border-style", this.settings.borderStyle);
    document.documentElement.style.setProperty("--rich-foot-border-opacity", this.settings.borderOpacity);
    document.documentElement.style.setProperty("--rich-foot-border-radius", `${this.settings.borderRadius}px`);
    document.documentElement.style.setProperty("--rich-foot-dates-opacity", this.settings.datesOpacity);
    document.documentElement.style.setProperty("--rich-foot-links-opacity", this.settings.linksOpacity);
    document.documentElement.style.setProperty("--rich-foot-date-color", this.settings.dateColor);
    document.documentElement.style.setProperty("--rich-foot-border-color", this.settings.borderColor);
    document.documentElement.style.setProperty("--rich-foot-link-color", this.settings.linkColor);
    document.documentElement.style.setProperty("--rich-foot-link-background", this.settings.linkBackgroundColor);
    document.documentElement.style.setProperty("--rich-foot-link-border-color", this.settings.linkBorderColor);
    const activeLeaf = this.app.workspace.activeLeaf;
    if ((activeLeaf == null ? void 0 : activeLeaf.view) instanceof import_obsidian4.MarkdownView) {
      await this.addRichFoot(activeLeaf.view);
      this.adjustFooterPadding();
    }
  }
  // check if a file should be excluded
  shouldExcludeFile(filePath) {
    var _a;
    if (!((_a = this.settings) == null ? void 0 : _a.excludedFolders)) {
      return false;
    }
    return this.settings.excludedFolders.some((folder) => filePath.startsWith(folder));
  }
  async getOutlinks(file) {
    const cache = this.app.metadataCache.getFileCache(file);
    const links = /* @__PURE__ */ new Set();
    if (cache == null ? void 0 : cache.links) {
      for (const link of cache.links) {
        const linkPath = link.link.split("#")[0];
        const targetFile = this.app.metadataCache.getFirstLinkpathDest(linkPath, file.path);
        if (targetFile && targetFile.extension === "md") {
          links.add(targetFile.path);
        }
      }
    }
    if (cache == null ? void 0 : cache.frontmatterLinks) {
      for (const link of cache.frontmatterLinks) {
        const linkPath = link.link.split("#")[0];
        const targetFile = this.app.metadataCache.getFirstLinkpathDest(linkPath, file.path);
        if (targetFile && targetFile.extension === "md") {
          links.add(targetFile.path);
        }
      }
    }
    if (cache == null ? void 0 : cache.blocks) {
      for (const block of Object.values(cache.blocks)) {
        if (block.type === "footnote") {
          const wikiLinkRegex = /\[\[(.*?)\]\]/g;
          let wikiMatch;
          while ((wikiMatch = wikiLinkRegex.exec(block.text)) !== null) {
            const linkText = wikiMatch[1];
            const linkPath = linkText.split("#")[0];
            const targetFile = this.app.metadataCache.getFirstLinkpathDest(linkPath, file.path);
            if (targetFile && targetFile.extension === "md") {
              links.add(targetFile.path);
            }
          }
        }
      }
    }
    const fileContent = await this.app.vault.read(file);
    const inlineFootnoteRegex = /\^\[((?:[^\[\]]|\[(?:[^\[\]]|\[[^\[\]]*\])*\])*)\]/g;
    const refFootnoteRegex = /\[\^[^\]]+\]:\s*((?:[^\[\]]|\[(?:[^\[\]]|\[[^\[\]]*\])*\])*)/g;
    let match;
    while ((match = inlineFootnoteRegex.exec(fileContent)) !== null) {
      const footnoteContent = match[1];
      await this.processFootnoteContent(footnoteContent, file, links);
    }
    while ((match = refFootnoteRegex.exec(fileContent)) !== null) {
      const footnoteContent = match[1];
      await this.processFootnoteContent(footnoteContent, file, links);
    }
    return links;
  }
  async processFootnoteContent(content, file, links) {
    const wikiLinkRegex = /\[\[(.*?)\]\]/g;
    let wikiMatch;
    while ((wikiMatch = wikiLinkRegex.exec(content)) !== null) {
      const linkText = wikiMatch[1].trim();
      const linkPath = linkText.split("#")[0];
      const targetFile = this.app.metadataCache.getFirstLinkpathDest(linkPath, file.path);
      if (targetFile && targetFile.extension === "md") {
        links.add(targetFile.path);
      }
    }
  }
  formatDate(date, format) {
    if (!date || !format) return "";
    return window.moment(date).format(format);
  }
  // Helper function to format a timestamp with a custom format
  formatTimestamp(timestamp, format) {
    if (!timestamp) return "";
    return this.formatDate(new Date(timestamp), format);
  }
  registerEvents() {
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (!file) return;
        document.querySelectorAll(".rich-foot").forEach((el) => el.remove());
        await this.quickUpdateCallback();
      })
    );
    this.registerEvent(
      this.app.workspace.on("layout-change", async () => {
        await this.quickUpdateCallback();
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", async (leaf) => {
        await this.quickUpdateCallback();
      })
    );
    const debouncedResize = (0, import_obsidian4.debounce)(async () => {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (!activeLeaf) return;
      const view = activeLeaf.view;
      if (!view || !(view instanceof import_obsidian4.MarkdownView)) return;
      await this.addRichFoot(view);
    }, 1e3);
    this.registerDomEvent(window, "resize", debouncedResize);
  }
};
var main_default = RichFootPlugin;
